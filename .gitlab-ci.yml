stages:
  - generate
  - test
  - deploy

variables:
  DATADOG_AGENT_BUILDERS: v9930706-ef9d493
  DATADOG_AGENT_BUILDIMAGES: v13321514-644fed4
  S3_CP_CMD: aws s3 cp --only-show-errors --region us-east-1 --sse AES256

generate-scripts:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:main"]
  stage: generate
  script:
    - make
  artifacts:
    expire_in: 2 weeks
    paths:
      - install_script.sh
      - install_script_agent6.sh
      - install_script_agent7.sh
      - install_script_docker_injection.sh
      - install_script_op_worker1.sh

.test:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker"]
  stage: test
  dependencies: ["generate-scripts"]
  script:
    - ./test/dockertest.sh --image "registry.ddbuild.io/images/mirror/${IMAGE}" --script install_script_agent6.sh
      --minor-version "${MINOR_VERSION}"
      --expected-minor-version "${EXPECTED_MINOR_VERSION}"
      --flavor "${FLAVOR}"
      --apt-url "$APT_URL"
      --apt-repo-version "$APT_REPO_VERSION_AGENT6"
      --yum-url "$YUM_URL"
      --yum-version-path "$YUM_VERSION_PATH_AGENT6"
    - ./test/dockertest.sh --image "registry.ddbuild.io/images/mirror/${IMAGE}" --script install_script_agent7.sh
      --minor-version "${MINOR_VERSION}"
      --expected-minor-version "${EXPECTED_MINOR_VERSION}"
      --flavor "${FLAVOR}"
      --apt-url "$APT_URL"
      --apt-repo-version "$APT_REPO_VERSION_AGENT7"
      --yum-url "$YUM_URL"
      --yum-version-path "$YUM_VERSION_PATH_AGENT7"

test_pinned_version:
  extends: .test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  parallel:
    # NOTE: to keep the matrix reasonably sized, we don't test everything everywhere
    # for example, it's ok to test getting specific flavor/minor version only on
    # CentOS 7 (yum) and Rocky 9 (dnf) and not on all versions of all RHEL derivatives
    matrix:
      - IMAGE: centos:centos7
        MINOR_VERSION: 38
      - IMAGE: rockylinux:9.0
        MINOR_VERSION: 38
      - IMAGE: ubuntu:14.04
        MINOR_VERSION: 38
      - IMAGE: debian:10.9
        MINOR_VERSION: 38
      # When installing pinned minor version and some repos are broken,
      # `zypper search` used will fail. We need to figure out a fix for this.
      #- IMAGE: opensuse/archive:42.3
      #  MINOR_VERSION: 38
      - IMAGE: opensuse/leap:15.4
        MINOR_VERSION: 38

# Opensuse13 only supports Datadog Agent version up 6.32, hence these tests should not be launched on pipelines triggered by datadog-agent pipelines
test_opensuse13:
  extends: .test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  parallel:
    matrix:
      - IMAGE: opensuse/archive:install_script_sles_11
      - IMAGE: opensuse/archive:install_script_sles_11
        FLAVOR: datadog-dogstatsd
      - IMAGE: opensuse/archive:install_script_sles_11
        FLAVOR: datadog-iot-agent

test:
  extends: .test
  parallel:
    # NOTE: to keep the matrix reasonably sized, we don't test everything everywhere
    # for example, it's ok to test getting specific flavor/minor version only on
    # CentOS 7 (yum) and Rocky 9 (dnf) and not on all versions of all RHEL derivatives
    matrix:
      - IMAGE: centos:centos7
      - IMAGE: centos:centos7
        FLAVOR: datadog-dogstatsd
      - IMAGE: centos:centos7
        FLAVOR: datadog-iot-agent
      - IMAGE: rockylinux:9.0
      - IMAGE: rockylinux:9.0
        FLAVOR: datadog-dogstatsd
      - IMAGE: rockylinux:9.0
        FLAVOR: datadog-iot-agent
      - IMAGE: amazonlinux:2
      - IMAGE: amazonlinux:2022
      - IMAGE: ubuntu:14.04
      - IMAGE: ubuntu:14.04
        FLAVOR: datadog-dogstatsd
      - IMAGE: ubuntu:14.04
        FLAVOR: datadog-iot-agent
      - IMAGE: debian:10.9
      - IMAGE: debian:10.9
        FLAVOR: datadog-dogstatsd
      - IMAGE: debian:10.9
        FLAVOR: datadog-iot-agent
      - IMAGE: ubuntu:14.04
      - IMAGE: ubuntu:22.04
      - IMAGE: opensuse/archive:42.3
      - IMAGE: opensuse/archive:42.3
        FLAVOR: datadog-dogstatsd
      - IMAGE: opensuse/archive:42.3
        FLAVOR: datadog-iot-agent
      - IMAGE: opensuse/leap:15.4
      - IMAGE: opensuse/leap:15.4
        FLAVOR: datadog-dogstatsd
      - IMAGE: opensuse/leap:15.4
        FLAVOR: datadog-iot-agent
      - IMAGE: debian:12.1



test-apm-injection:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: ["runner:docker"]
  stage: test
  dependencies: ["generate-scripts"]
  parallel:
    # Docker testing is not possible because of docker-in-docker
    # Host injection requires the agent to be present
    # NO_AGENT only makes sense with docker, or specifically installing apm libraries
    # The matrix below tests the possible combinations with a subset of OSes
    matrix:
      - IMAGE: ["ubuntu:14.04", "ubuntu:22.04", "centos:centos7" ]
        INJECTION: "host"
        SCRIPT: "install_script_agent7.sh"
      - IMAGE: ["ubuntu:14.04", "ubuntu:22.04", "centos:centos7" ]
        INJECTION: "docker"
        NO_AGENT: "true"
        APM_LIBRARIES: "all"
        SCRIPT: "install_script_agent7.sh"
      - IMAGE: ["ubuntu:14.04", "ubuntu:22.04", "centos:centos7"]
        # We intentionally don't pass NO_AGENT here to ensure this script works without it
        # NO_AGENT: "true"
        APM_LIBRARIES: "all"
        SCRIPT: "install_script_docker_injection.sh"

  script:
    - ./test/dockertest.sh --image "registry.ddbuild.io/images/mirror/${IMAGE}" --script "$SCRIPT" --injection "$INJECTION" --no-agent "$NO_AGENT" --apm-libraries "$APM_LIBRARIES"

test-observability-pipelines-worker:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/docker_x64:$DATADOG_AGENT_BUILDIMAGES
  rules:
  - if: '$CI_PIPELINE_SOURCE == "push"'
  tags: ["runner:docker"]
  stage: test
  dependencies: ["generate-scripts"]
  parallel:
    matrix:
      - IMAGE: amazonlinux:2
      - IMAGE: amazonlinux:2023
      - IMAGE: debian:10
      - IMAGE: debian:11
      - IMAGE: rockylinux:9.0
      - IMAGE: ubuntu:20.04
      - IMAGE: ubuntu:22.04
      - IMAGE: amazonlinux:2
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
      - IMAGE: amazonlinux:2023
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
      - IMAGE: debian:10
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
      - IMAGE: debian:11
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
      - IMAGE: rockylinux:9.0
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
      - IMAGE: ubuntu:20.04
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
      - IMAGE: ubuntu:22.04
        INSTALL_CLASSIC_AGENT: --opw-install-classic-agent install_script_agent7.sh
  script:
    - ./test/dockertest.sh --image "registry.ddbuild.io/images/mirror/${IMAGE}" --script install_script_op_worker1.sh --observability-pipelines-worker "true" --minor-version "${MINOR_VERSION}" --expected-minor-version "${EXPECTED_MINOR_VERSION}" ${INSTALL_CLASSIC_AGENT}

deploy:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/gitlab_agent_deploy:$DATADOG_AGENT_BUILDERS
  tags: ["runner:main"]
  stage: deploy
  dependencies: ["generate-scripts"]
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  parallel:
    matrix:
      - SCRIPT: install_script.sh
      - SCRIPT: install_script_agent6.sh
      - SCRIPT: install_script_agent7.sh
      - SCRIPT: install_script_docker_injection.sh
      - SCRIPT: install_script_op_worker1.sh
  script:
    - $S3_CP_CMD ./${SCRIPT} s3://dd-agent/scripts/${SCRIPT} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732
