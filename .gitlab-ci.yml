stages:
  - generate
  - test
  - e2e
  - e2e_test_upload
  - deploy

variables:
  AWS_MAX_ATTEMPTS: 5 # retry AWS operations 5 times if they fail on network errors
  DATADOG_AGENT_BUILDERS: v9930706-ef9d493
  DATADOG_AGENT_BUILDIMAGES: v28948509-c025473e
  S3_CP_CMD: aws s3 cp --only-show-errors --region us-east-1 --sse AES256
  TEST_INFRA_DEFINITIONS_BUILDIMAGES: 894572ece376
  DEFAULT_MAJOR_VERSION: 7
  TESTING_DIR: ${CI_PROJECT_DIR}
  DD_INSTALL_ONLY: "true"
  DD_API_KEY: 123
  DD_OP_PIPELINE_ID: 123
  DD_ENV: testenv

default:
  # Handle inputs when running as a downstream pipeline from the datadog-agent repo
  before_script:
    - '[ -z "$MAJOR_VERSION" ] && export MAJOR_VERSION=${DEFAULT_MAJOR_VERSION}'
    - '[ ! -z "$TEST_PIPELINE_ID" ] && export TESTING_YUM_VERSION_PATH="testing/pipeline-${TEST_PIPELINE_ID}-a${MAJOR_VERSION}/${MAJOR_VERSION}"'
    - '[ ! -z "$TEST_PIPELINE_ID" ] && export TESTING_APT_REPO_VERSION="pipeline-${TEST_PIPELINE_ID}-a${MAJOR_VERSION}-x86_64 ${MAJOR_VERSION}"'

generate-scripts:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/deb_x64:$DATADOG_AGENT_BUILDIMAGES
  tags: [arch:amd64]
  stage: generate
  script:
    - make
  artifacts:
    expire_in: 2 weeks
    paths:
      - install_script.sh
      - install_script_agent6.sh
      - install_script_agent7.sh
      - install_script_docker_injection.sh
      - install_script_op_worker1.sh
      - install_script_op_worker2.sh
      - install_script_vector0.sh

unit_tests:
  image: registry.ddbuild.io/images/mirror/ubuntu:22.04
  tags: [arch:amd64]
  stage: test
  dependencies: ["generate-scripts"]
  script:
    - apt-get update && apt-get install -y shunit2 yamllint curl sudo
    - DD_API_KEY=123 DD_SITE="datadoghq.com" DD_INSTALL_ONLY=true bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script_agent7.sh)"
    - python3 unit_tests/extract_functions.py
    - ./unit_tests/test_install_script.sh

.test:
  image: registry.ddbuild.io/images/mirror/${IMAGE}
  tags: ["arch:amd64"]
  stage: test
  dependencies: ["generate-scripts"]
  variables:
    SCRIPT: "install_script_agent${MAJOR_VERSION}.sh"
  script:
    - ./test/localtest.sh

test_pinned_version:
  extends: .test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  variables:
    MINOR_VERSION: 38
  parallel:
    # NOTE: to keep the matrix reasonably sized, we don't test everything everywhere
    # for example, it's ok to test getting specific flavor/minor version only on
    # CentOS 7 (yum) and Rocky 9 (dnf) and not on all versions of all RHEL derivatives
    matrix:
      # When installing pinned minor version and some repos are broken,
      # `zypper search` used will fail. We need to figure out a fix for this.
      #- IMAGE: opensuse/archive:42.3
      #  MINOR_VERSION: 38
      - IMAGE:
          [
            centos:centos7,
            rockylinux:9.0,
            ubuntu:14.04,
            debian:10.9,
            opensuse/leap:15.4,
          ]
        MAJOR_VERSION: [6, 7]

# Opensuse13 only supports Datadog Agent version up 6.32, hence these tests should not be launched on pipelines triggered by datadog-agent pipelines
test_opensuse13:
  extends: .test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  parallel:
    matrix:
      - IMAGE: opensuse/archive:install_script_sles_11
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]

# CentOS/RHEL 6 only support Datadog Agent version up 6.51, hence these tests should not be launched on pipelines triggered by datadog-agent pipelines
test_centos6:
  extends: .test
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  parallel:
    matrix:
      - IMAGE: centos:centos6
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]

test:
  extends: .test
  parallel:
    # NOTE: to keep the matrix reasonably sized, we don't test everything everywhere
    # for example, it's ok to test getting specific flavor/minor version only on
    # CentOS 7 (yum) and Rocky 9 (dnf) and not on all versions of all RHEL derivatives
    matrix:
      - IMAGE: centos:centos7
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]
      - IMAGE: rockylinux:9.0
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]
      - IMAGE: amazonlinux:2
        MAJOR_VERSION: [6, 7]
      - IMAGE: amazonlinux:2022
        MAJOR_VERSION: [6, 7]
      - IMAGE: ubuntu:14.04
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]
      - IMAGE: debian:10.9
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]
      - IMAGE: ubuntu:22.04
        MAJOR_VERSION: [6, 7]
      - IMAGE: opensuse/archive:42.3
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]
      - IMAGE: opensuse/leap:15.4
        FLAVOR: [datadog-agent, datadog-dogstatsd, datadog-iot-agent]
        MAJOR_VERSION: [6, 7]
      - IMAGE: debian:12.1
        MAJOR_VERSION: [6, 7]
  artifacts:
    name: "artifacts"
    paths:
      - artifacts/

.test-yaml:
  image: registry.ddbuild.io/images/mirror/python:3.9.6-alpine3.14
  tags: [arch:amd64]
  stage: test
  script:
    - pip install yamllint
    - for file in $CI_PROJECT_DIR/artifacts/*; do yamllint -c .yamllint.yaml --no-warnings $file; done

test-yaml-redhat:
  extends: .test-yaml
  needs:
    - "test: [centos:centos7, datadog-agent, 7]"

test-yaml-debian:
  extends: .test-yaml
  needs:
    - "test: [ubuntu:14.04, datadog-agent, 7]"

test-yaml-suse:
  extends: .test-yaml
  needs:
    - "test: [opensuse/archive:42.3, datadog-agent, 7]"

test-apm-injection:
  image: registry.ddbuild.io/images/mirror/${IMAGE}
  tags: ["arch:amd64"]
  stage: test
  dependencies: ["generate-scripts"]
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  parallel:
    # Docker testing is not possible because of docker-in-docker
    # Host injection requires the agent to be present
    # NO_AGENT only makes sense with docker, or specifically installing apm libraries
    # The matrix below tests the possible combinations with a subset of OSes
    matrix:
      - IMAGE: ["ubuntu:14.04", "ubuntu:22.04", "centos:centos7"]
        DD_APM_INSTRUMENTATION_ENABLED: "host"
        SCRIPT: "install_script_agent7.sh"
      - IMAGE: ["ubuntu:14.04", "ubuntu:22.04", "centos:centos7"]
        DD_APM_INSTRUMENTATION_ENABLED: "docker"
        DD_NO_AGENT_INSTALL: "true"
        DD_APM_INSTRUMENTATION_LANGUAGES: "all"
        SCRIPT: "install_script_agent7.sh"
      - IMAGE: ["ubuntu:14.04", "ubuntu:22.04", "centos:centos7"]
        # We intentionally don't pass NO_AGENT here to ensure this script works without it
        # NO_AGENT: "true"
        DD_APM_INSTRUMENTATION_LANGUAGES: "all"
        SCRIPT: "install_script_docker_injection.sh"

  script:
    - ./test/localtest.sh

test-observability-pipelines-worker:
  image: registry.ddbuild.io/images/mirror/${IMAGE}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags: ["arch:amd64"]
  stage: test
  dependencies: ["generate-scripts"]
  variables:
    # TODO once OPW 2.0 has a production release this needs to change to the v2 script
    SCRIPT: ./install_script_op_worker1.sh
  parallel:
    matrix:
      - IMAGE:
          [
            amazonlinux:2,
            amazonlinux:2023,
            debian:10,
            debian:11,
            rockylinux:9.0,
            ubuntu:20.04,
            ubuntu:22.04,
          ]
        DD_OPW_INSTALL_CLASSIC_AGENT: ["", install_script_agent7.sh]
  script:
    - ./test/op-worker-test.sh

test-vector:
  image: registry.ddbuild.io/images/mirror/${IMAGE}
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
  tags: ["arch:amd64"]
  stage: test
  dependencies: ["generate-scripts"]
  variables:
    SCRIPT: ./install_script_vector0.sh
  parallel:
    matrix:
      - IMAGE:
          [
            amazonlinux:2,
            amazonlinux:2023,
            debian:10,
            debian:11,
            rockylinux:9.0,
            ubuntu:20.04,
            ubuntu:22.04,
          ]
  script:
    - ./test/vector-test.sh

e2e:
  stage: e2e
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/test-infra-definitions/runner:$TEST_INFRA_DEFINITIONS_BUILDIMAGES
  tags: ["arch:amd64"]
  dependencies:
    - generate-scripts
  before_script:
    # Setup AWS Credentials
    - mkdir -p ~/.aws
    - aws ssm get-parameter --region us-east-1 --name ci.agent-linux-install-script.agent-qa-profile --with-decryption --query "Parameter.Value" --out text >> ~/.aws/config
    - export AWS_PROFILE=agent-qa-ci
    - aws ssm get-parameter --region us-east-1 --name ci.agent-linux-install-script.ssh_public_key --with-decryption --query "Parameter.Value" --out text > $E2E_PUBLIC_KEY_PATH
    - aws ssm get-parameter --region us-east-1 --name ci.agent-linux-install-script.ssh_private_key --with-decryption --query "Parameter.Value" --out text > $E2E_PRIVATE_KEY_PATH
    - export DD_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.agent-linux-install-script.datadog_api_key --with-decryption --query "Parameter.Value" --out text)
    # Use S3 backend
    - pulumi login "s3://dd-pulumi-state?region=us-east-1&awssdk=v2&profile=$AWS_PROFILE"
    # Put install scripts in a folder for copy
    - mkdir -p $CI_PROJECT_DIR/test/e2e/scripts && cp $CI_PROJECT_DIR/install_script*.sh $CI_PROJECT_DIR/test/e2e/scripts
  script:
    - cd test/e2e && gotestsum --format standard-verbose --junitfile "junit-${CI_JOB_NAME}.xml" -- -timeout 0s . -v --flavor ${FLAVOR} --platform ${PLATFORM} --scriptPath ${SCRIPT_PATH} ${EXTRA_PARAMS}
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: on_success
      allow_failure: true
  variables:
    KUBERNETES_MEMORY_REQUEST: 12Gi
    KUBERNETES_MEMORY_LIMIT: 16Gi
    E2E_PUBLIC_KEY_PATH: /tmp/agent-qa-ssh-key.pub
    E2E_PRIVATE_KEY_PATH: /tmp/agent-qa-ssh-key
    E2E_KEY_PAIR_NAME: ci.agent-linux-install-script
    TEAM: agent-platform
    SCRIPT_PATH: $CI_PROJECT_DIR/test/e2e/scripts
  artifacts:
    expire_in: 2 weeks
    when: always
    paths:
      - test/e2e/junit-*.xml
    reports:
      junit: test/e2e/junit-*.xml
  parallel:
    matrix:
      - FLAVOR: datadog-agent
        PLATFORM:
          - Debian_11
          - Ubuntu_22_04
          - RedHat_CentOS_7
          - RedHat_8
          - Amazon_Linux_2023
          - openSUSE_15
        EXTRA_PARAMS:
          - --run TestInstallSuite
          - --run TestUpgrade6Suite
          - --run TestUpgrade7Suite
          - --run TestInstallMaximalAndRetrySuite
          - --run TestInstallSecurityAgentSuite
          - --run TestInstallSystemProbeSuite
          - --run TestInstallComplianceAgentSuite
          - --skip Test(Install|Upgrade5|Upgrade6|Upgrade7|InstallFips|InstallMaximalAndRetry|InstallSecurityAgent|InstallSystemProbe|InstallComplianceAgent)Suite
      - FLAVOR: datadog-agent
        E2E_OVERRIDE_INSTANCE_TYPE: "t2.medium"
        PLATFORM:
          - RedHat_CentOS_6
        EXTRA_PARAMS:
          - --run TestInstallSuite
          - --run TestUpgrade6Suite
          - --run TestUpgrade7Suite
          - --run TestInstallMaximalAndRetrySuite
          - --run TestInstallSecurityAgentSuite
          - --run TestInstallSystemProbeSuite
          - --run TestInstallComplianceAgentSuite
          - --skip Test(Install|Upgrade5|Upgrade6|Upgrade7|InstallFips|InstallMaximalAndRetry|InstallSecurityAgent|InstallSystemProbe|InstallComplianceAgent)Suite
      - FLAVOR: datadog-agent
        PLATFORM:
          - Debian_11
          - Ubuntu_22_04
          - RedHat_CentOS_7
          - RedHat_8
          - Amazon_Linux_2023
        EXTRA_PARAMS:
          - --run TestUpgrade5Suite
          - --run TestInstallFipsSuite
      - FLAVOR: datadog-dogstatsd
        PLATFORM:
          - Debian_11
          - Ubuntu_22_04
          - RedHat_CentOS_7
          - RedHat_8
          - Amazon_Linux_2023
          - openSUSE_15
        EXTRA_PARAMS:
          - --run TestInstallSuite
          - --run TestUpgrade7Suite
      - FLAVOR: datadog-iot-agent
        PLATFORM:
          - Debian_11
          - Ubuntu_22_04
          - RedHat_CentOS_7
          - RedHat_8
          - Amazon_Linux_2023
          - openSUSE_15
        EXTRA_PARAMS:
          - --run TestInstallSuite
          - --run TestUpgrade7Suite

e2e_test_upload:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-buildimages/datadog-ci-uploader:$DATADOG_AGENT_BUILDIMAGES
  tags: ["arch:amd64"]
  stage: e2e_test_upload
  allow_failure: true
  rules:
    - if: $CI_COMMIT_TAG
      when: always
    - when: on_success
      allow_failure: true
  dependencies:
    - e2e
  script:
    - set +x
    - export DATADOG_API_KEY=$(aws ssm get-parameter --region us-east-1 --name ci.agent-linux-install-script.datadog_api_key --with-decryption --query "Parameter.Value" --out text)
    - set -x
    - for f in test/e2e/*.xml; do datadog-ci junit upload --service agent-linux-install-script --tags test.codeowners:@DataDog/agent-platform --tags ci.job.name:e2e --tags ci.stage.name:e2e "$f"; done

deploy:
  image: 486234852809.dkr.ecr.us-east-1.amazonaws.com/ci/datadog-agent-builders/gitlab_agent_deploy:$DATADOG_AGENT_BUILDERS
  tags: ["arch:amd64"]
  stage: deploy
  dependencies: ["generate-scripts"]
  rules:
    - if: $CI_COMMIT_TAG
      when: manual
    - when: never
  parallel:
    matrix:
      - SCRIPT: install_script.sh
      - SCRIPT: install_script_agent6.sh
      - SCRIPT: install_script_agent7.sh
      - SCRIPT: install_script_docker_injection.sh
      - SCRIPT: install_script_op_worker1.sh
      - SCRIPT: install_script_op_worker2.sh
      - SCRIPT: install_script_vector0.sh
  script:
    - $S3_CP_CMD ./${SCRIPT} s3://dd-agent/scripts/${SCRIPT} --grants read=uri=http://acs.amazonaws.com/groups/global/AllUsers full=id=3a6e02b08553fd157ae3fb918945dd1eaae5a1aa818940381ef07a430cf25732
  after_script:
    # invalidate the install.datadoghq.com CF distribution
    - export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s"
      $(aws --region "us-east-1" sts assume-role
      --duration-seconds 900
      --role-arn "arn:aws:iam::464622532012:role/build-stable-cloudfront-invalidation"
      --role-session-name "build-stable-cloudfront-invalidate-script"
      --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]"
      --output text
      )
      )
    - aws --region "us-east-1" cloudfront create-invalidation --distribution-id "E2VSER0FO39KRV" --paths "/scripts/*"
